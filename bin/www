#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('istamp-web:server');
const http = require('http');
const https = require('https');
const fs = require("fs");
const express = require('express');

/**
 * Get port from environment and store in Express.
 */

// SSL 인증서 경로
// SSL 인증서 파일 경로 및 비밀번호 설정
/*
const sslOptions = {
    //pfx: fs.readFileSync(path.resolve(__dirname, 'path/to/allthemind_com.pfx')),
    pfx: fs.readFileSync('/root/project/ISTAMP_WEB3/bin/allthemind_com.pfx'),
    passphrase: '21587', // .pfx 파일 비밀번호
    // key: fs.readFileSync(path.resolve(__dirname, 'path/to/your_private_key.pem')),
    // cert: fs.readFileSync(path.resolve(__dirname, 'path/to/your_certificate.crt')),
};
*/
/*
const sslOptions = {
    key: fs.readFileSync('/root/project/ISTAMP_WEB4/bin/allthemind_com_SHA256WITHRSA.key'),
    cert: fs.readFileSync( '/root/project/ISTAMP_WEB4/bin/allthemind_com.crt'),
};
*/
// 포트 설정
const port = normalizePort(process.env.CONST_WEB_PORT || '443'); // HTTPS 포트는 일반적으로 443입니다.
app.set('port', port);
console.log('port: ' + port);


/**
 * Create HTTP server.
 */

const server = http.createServer(app);
//const server = https.createServer(sslOptions, app);
/**
 * Listen on provided port, on all network interfaces.
 */
const httpApp = express();
httpApp.set('port', normalizePort(process.env.CONST_WEB_PORT || '80'));
httpApp.get('*', (req, res) => {
    res.redirect('https://' + req.headers.host + req.url);
});
const httpServer  = http.createServer(httpApp);


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
